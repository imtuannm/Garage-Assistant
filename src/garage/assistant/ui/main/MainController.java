package garage.assistant.ui.main;

import com.jfoenix.controls.JFXTextField;
import com.jfoenix.effects.JFXDepthManager;
import garage.assistant.database.DatabaseHandler;
import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class MainController implements Initializable {

    @FXML
    private HBox motorbike_info;
    @FXML
    private HBox member_info;
    @FXML
    private TextField motorbikeIdInput;
    @FXML
    private Text motorbikeProducer;
    @FXML
    private Text motorbikeID;
    @FXML
    private Text motorbikeName;
    @FXML
    private Text motorbikeStatus;
    
    @FXML
    private JFXTextField memberIdInput;
    @FXML
    private Text memberName;
    @FXML
    private Text memberID;
    @FXML
    private Text memberMobile;
    
    DatabaseHandler dbHandler;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        
        //UI - set depth
        JFXDepthManager.setDepth(motorbike_info, 1); //0 - 5
        JFXDepthManager.setDepth(member_info, 1);
        
        dbHandler = DatabaseHandler.getInstance();
    }    

    @FXML
    private void loadAddMember(ActionEvent event) {
        loadWindow("/garage/assistant/ui/addmember/member_add.fxml",
                "/garage/assistant/viewable/member.png", "Add new Member");
    }

    @FXML
    private void loadAddMotorbike(ActionEvent event) {
        loadWindow("/garage/assistant/ui/addmotorbike/add_motorbike.fxml",
                "/garage/assistant/viewable/mobtorbike.png", "Add new Motorbike");
    }

    @FXML
    private void loadMemberTable(ActionEvent event) {
        loadWindow("/garage/assistant/ui/listmember/member_list.fxml",
                "/garage/assistant/viewable/member_list.png","All Member");
    }

    @FXML
    private void loadMotorbikeTable(ActionEvent event) {
        loadWindow("/garage/assistant/ui/listmotorbike/motorbike_list.fxml",
                "/garage/assistant/viewable/motorbile_list.png","All Motorbike");
    }
    
    //call another window in-app
    void loadWindow(String dirLct, String dirIcon, String title) {
        try {
            Parent parent  = FXMLLoader.load(getClass().getResource(dirLct));
            Stage stage = new Stage(StageStyle.DECORATED);
            stage.setTitle(title);
            stage.setScene(new Scene(parent));
            
            //set icon
            Image ico = new Image(dirIcon);
            stage.getIcons().add(ico);
            
            stage.show();
            
        } catch (IOException ex) { //auto generated by try-catch
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void loadMotorbikeInfo(ActionEvent event) {
        String id = motorbikeIdInput.getText();
        String qr = "SELECT * FROM MOTORBIKE WHERE idMotorbike = '" + id + "'";
        
        ResultSet rs = dbHandler.excQuery(qr);
        
        Boolean flag = false;
        
        try {
            while(rs.next()) { //set info to textfield
                String mbProducer = rs.getString("producer");
                String mbID = rs.getString("idMotorbike");
                String mbName = rs.getString("name");
                int mbType = rs.getInt("type");
                Boolean mbStatus = rs.getBoolean("isAvail");
                
                motorbikeProducer.setText(mbProducer);
                
                switch (mbType) {
                case 1:
                    motorbikeID.setText(mbID + " [Motor]");
                    break;
                case 2:
                    motorbikeID.setText(mbID + " [Car]");
                    break;
                case 3:
                    motorbikeID.setText(mbID + " [S-D Car]");
                    break;
                default:
                    motorbikeID.setText("null");
                    break;
                }
                
                motorbikeName.setText(mbName);
                String stt = (mbStatus) ? "Available" : "NOT Available";
                motorbikeStatus.setText(stt);
                flag = true;
            }
            if( !flag ) { //doesnt exist
                motorbikeName.setText("No such Motorbike found!");
                clrMotorbikeCached();
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void loadMemberInfo(ActionEvent event) {
        String id = memberIdInput.getText();
        String qr = "SELECT * FROM MEMBER WHERE idMember = '" + id + "'";
        
        ResultSet rs = dbHandler.excQuery(qr);
        
        Boolean flag = false;
        
        try {
            while(rs.next()) { //set info to textfield
                String mID = rs.getString("idMember");
                String mName = rs.getString("name");
                String mMobile = rs.getString("mobile");
                
                memberName.setText(mName);
                memberID.setText(mID);
                memberMobile.setText(mMobile);
                
                flag = true;
            }
            if( !flag ) { //doesnt exist
                memberName.setText("No such Member found!");
                clrMemberCached();
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }
    
    //clear old text while can not find infomations
    void clrMotorbikeCached() {
        motorbikeProducer.setText("-");
        motorbikeID.setText("-");
        motorbikeStatus.setText("-");
    }
    
    //also clear old text
    void clrMemberCached() {
        memberID.setText("-");
        memberMobile.setText("-");
    }

    //todo
    @FXML
    private void loadIssueOperation(ActionEvent event) {
        String memID = memberIdInput.getText();
        String mtbID = motorbikeIdInput.getText();
        
        //make an alert box to confirm
        Alert alt = new Alert(Alert.AlertType.CONFIRMATION);
        alt.setTitle("Confirm");
        alt.setHeaderText(null);
        alt.setContentText("Are you sure issuing [" + motorbikeName.getText() + "] to ["
                            + memberName.getText() + "]?");
        
        Optional<ButtonType> response = alt.showAndWait();
        
        if( response.get() == ButtonType.OK ) {
 
        }
        
    }
    
}